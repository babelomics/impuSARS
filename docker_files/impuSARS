#!/bin/bash -l

SCRIPT_PATH=`readlink -f $0`
DIR_PATH=`dirname $SCRIPT_PATH`
PATH=${DIR_PATH}:$PATH

# Input arguments
function parseArgs(){

  threads=1
  prefix="sars-cov-2"
  reference="$DIR_PATH/references/SARS_CoV_2_REFERENCE.v1.0.fasta"
  panel="$DIR_PATH/references/SARS_CoV_2_IMPUTATION_PANEL.v3.0.m3vcf.gz"
  showver="false"

  arg=$1
  while [[ "$arg" != "" ]]
  do
    case "$1" in
      "--infile")
       shift
       infile=$1
       ;;
      "--outprefix")
       shift
       prefix=$1
       ;;
      "--reference")
       shift
       reference=$1
       ;;
      "--panel")
       shift
       panel=$1
       ;;              
      "--threads")
       shift
       threads=$1
       ;;
       "--version")
       shift
       showver="true"
       #echo '->'$threads
       ;;  
      *)
       echo 'Unknown argument '$1
       shift
    esac
    shift
    arg=$1
  done
}


parseArgs $@

version="v3.1"
verref="v3.0"

# Print version
if [[ "$showver" == "true" ]]; then
  echo "$version (${verref}-reference)"
  exit 1
fi

echo >&2 "
*************************************
*** RUNNING SARS-CoV-2 IMPUTATION ***
***     impuSARS     $version     ***
***     impuSARS-ref $verref     ***
*************************************
"

# Determine input type
if [[ $infile == *"vcf"* ]]; then

   vcffile=`echo $infile`
   tabix $vcffile

elif [[ $infile == *".fa"*  ]]; then

   echo >&2 "[ impuSARS ] Preprocessing FASTA file"
   vcffile="$CONDA_PREFIX/tmp/converted.vcf.gz"
   fasta2vcf --infasta $infile --outvcf $vcffile --reference ${reference}

else

   echo >&2 "[ERROR] Input format not recognized. Please use a FASTA o VCF file."

fi

outpath=`dirname $infile`
prevcf="${prefix}.vcf.gz"

echo >&2 "[ impuSARS ] Preparing input for imputation"
header=`bcftools view -H $vcffile | head -1 | cut -f1`
bcftools view $vcffile | sed "s/^${header}/X/g" | bcftools view -Oz -o $CONDA_PREFIX/tmp/$prevcf &> /dev/null
tabix $CONDA_PREFIX/tmp/$prevcf

echo >&2 "[ impuSARS ] Imputing missing variants"
minimac4  --cpus ${threads} --refHaps ${panel} \
          --haps $CONDA_PREFIX/tmp/$prevcf --minRatio 0.00001 --log --prefix $CONDA_PREFIX/tmp/${prefix} &> /dev/null
if error=`grep -1 "ERROR" $CONDA_PREFIX/tmp/${prefix}.logfile`; then
   echo >&2 $error
   echo >&2 "Note: Target does not cover enough genome to get an accurate imputation."
   exit 1
fi
tabix $CONDA_PREFIX/tmp/${prefix}.dose.vcf.gz

echo >&2 "[ impuSARS ] Joining imputed variants with input"
bcftools view $CONDA_PREFIX/tmp/${prefix}.dose.vcf.gz | grep -v TYPED | \
    bcftools view -Oz -o $CONDA_PREFIX/tmp/${prefix}.dose.onlyImputed.vcf.gz
tabix $CONDA_PREFIX/tmp/${prefix}.dose.onlyImputed.vcf.gz

bcftools concat $CONDA_PREFIX/tmp/$prevcf $CONDA_PREFIX/tmp/${prefix}.dose.onlyImputed.vcf.gz | \
    bcftools sort -Oz -o $CONDA_PREFIX/tmp/${prefix}.dose.joined.vcf.gz
tabix $CONDA_PREFIX/tmp/${prefix}.dose.joined.vcf.gz

echo >&2 "[ impuSARS ] Postprocessing imputation results"
bcftools norm -m +both $CONDA_PREFIX/tmp/${prefix}.dose.joined.vcf.gz | \
     bcftools norm --check-ref s -f ${reference} | \
     bcftools view -c1 -Oz -o $CONDA_PREFIX/tmp/${prefix}.dose.multiallelic.fixref.vcf.gz
tabix $CONDA_PREFIX/tmp/${prefix}.dose.multiallelic.fixref.vcf.gz

echo >&2 "[ impuSARS ] Calculating consensus sequence"
sequences=`bcftools view -h $CONDA_PREFIX/tmp/${prefix}.dose.multiallelic.fixref.vcf.gz | grep CHROM | cut -f10- | tr -s '\t' '\n'`
for seq in $sequences; do
   bcftools consensus -s $seq -f ${reference} $CONDA_PREFIX/tmp/${prefix}.dose.multiallelic.fixref.vcf.gz | \
       sed "s/>X/>$seq/g" >> $CONDA_PREFIX/tmp/${prefix}.imputed.consensus.fa

   # Reformat consensus to keep known sequence from input
   cat $infile $CONDA_PREFIX/tmp/${prefix}.imputed.consensus.fa > $CONDA_PREFIX/tmp/${prefix}.joined.consensus.fa
   muscle -in $CONDA_PREFIX/tmp/${prefix}.joined.consensus.fa -out $CONDA_PREFIX/tmp/${prefix}.aligned.consensus.fa -quiet
   fixFASTA.py --fasta $CONDA_PREFIX/tmp/${prefix}.aligned.consensus.fa \
               --output ${outpath}/${prefix}.impuSARS.sequence.fa \
               --mode consensus
done

echo >&2 "[ impuSARS ] Assigning lineage"
conda run -n impusars pangolin ${outpath}/${prefix}.impuSARS.sequence.fa -t ${threads} \
      --outfile ${outpath}/${prefix}.impuSARS.lineage.csv &> /dev/null

